import socket
import hashlib
import hmac

def hash_with_secret_key(message, secret_key):
    hmac_digest = hmac.new(secret_key.encode(), message.encode(), hashlib.sha512).digest()
    hmac_hex = hmac_digest.hex()
    return hmac_hex

def start_client():
    global server_ip, secret_key
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect((server_ip, 1234))
        print(f"Successfully connected to {server_ip}")
        secret_key = input("Enter the secret key: ")
    except Exception as e:
        print(f"Unable to connect to {server_ip}: {e}")
        return 0 

    while True:
        # Send a message to the server
        message = input("Enter a message: ")
        
        # Hash the message with the secret key using SHA-512
        hashed_message = hash_with_secret_key(message, secret_key) + "\n message is: " + message

        client.send(hashed_message.encode())

        # Receive response from the server
        response = client.recv(1024).decode()
        if len(response) < 1:
            break
        response_hmac, response_message = response.split("\n the response by server is: ")
        print (f"recieved message from server, please hold on till we check the integrity of message......")
        computed_hmac = hash_with_secret_key (response_message, secret_key)
        if response_hmac == computed_hmac:
            print (f"message integrity verified. Recieved response: {response_message}")
        else:
            print (f"message integrity verification failed. Discarding the message ......")

if __name__ == "__main__":
    server_ip = input("Enter the IP address of the server: ")

    start_client()
