import socket
import hashlib
import hmac

def hash_with_secret_key(message, secret_key):
    hmac_digest = hmac.new(secret_key.encode(), message.encode(), hashlib.sha512).digest()
    hmac_hex = hmac_digest.hex()
    return hmac_hex

def start_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('0.0.0.0', 1234))
    server.listen(1)
    print("Server listening on port 1234....")

    conn, addr = server.accept()
    #7print (conn)
    print(f"Connection recieved from {addr}")
    secret_key = input("Enter the secret key: ")

    while True:

        data = conn.recv(1024).decode('utf-8')
        if  len(data) < 1:
            break

        received_hmac, received_message = data.split("\n message is: ")
        print (f"received message from {addr[0]}, please hold on while we check its integrity...")
        computed_hmac = hash_with_secret_key(received_message, secret_key)

        if received_hmac == computed_hmac:
            print (f"message integrity verified. Received message: {received_message}")  
            response = input("Enter a response: ")
            hashed_response = hash_with_secret_key(response, secret_key) + "\n the response by server is: " + response
            conn.send(hashed_response.encode())
        else:
            print (f"message integrity verification failed. Discarding the message......")     
    
    conn.close()

if __name__ == "__main__":
    start_server()
